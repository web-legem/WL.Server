// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using WL.Persistance;

namespace WL.Persistance.Migrations
{
    [DbContext(typeof(WLDbContext))]
    [Migration("20190426152834_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("WL.Domain.Annotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AnnotationTypeId");

                    b.Property<string>("Description");

                    b.Property<long>("FromDocumentId");

                    b.Property<long?>("FromId");

                    b.Property<long>("ToDocumentId");

                    b.Property<long?>("ToId");

                    b.HasKey("Id")
                        .HasName("PK_A");

                    b.HasAlternateKey("FromDocumentId", "ToDocumentId")
                        .HasName("AK_A_FDI_TDI");

                    b.HasIndex("AnnotationTypeId")
                        .HasName("IX_A_ATI");

                    b.HasIndex("FromId")
                        .HasName("IX_A_FI");

                    b.HasIndex("ToId")
                        .HasName("IX_A_TI");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("WL.Domain.AnnotationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Root")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("PK_AT");

                    b.HasAlternateKey("Name")
                        .HasName("AK_AT_N");

                    b.HasAlternateKey("Root")
                        .HasName("AK_AT_R");

                    b.ToTable("AnnotationTypes");
                });

            modelBuilder.Entity("WL.Domain.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DocumentTypeId");

                    b.Property<long>("EntityId");

                    b.Property<long>("FileDocumentId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("PublicationDate");

                    b.Property<long>("PublicationYear");

                    b.HasKey("Id")
                        .HasName("PK_D");

                    b.HasAlternateKey("DocumentTypeId", "EntityId", "Number", "PublicationYear")
                        .HasName("AK_D_DTI_EI_N_PY");

                    b.HasIndex("EntityId")
                        .HasName("IX_D_EI");

                    b.HasIndex("FileDocumentId")
                        .IsUnique()
                        .HasName("IX_D_FDI");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WL.Domain.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("PK_DT");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ_DT_N");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("WL.Domain.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("EntityTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("PK_E");

                    b.HasAlternateKey("Name")
                        .HasName("AK_E_N");

                    b.HasIndex("EntityTypeId")
                        .HasName("IX_E_ETI");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("WL.Domain.EntityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("PK_ET");

                    b.HasAlternateKey("Name")
                        .HasName("AK_ET_N");

                    b.ToTable("EntityTypes");
                });

            modelBuilder.Entity("WL.Domain.EntityTypeDocumentType", b =>
                {
                    b.Property<long>("EntityTypeId");

                    b.Property<long>("DocumentTypeId");

                    b.HasKey("EntityTypeId", "DocumentTypeId")
                        .HasName("PK_ETDT");

                    b.HasIndex("DocumentTypeId")
                        .HasName("IX_ETDT_DTI");

                    b.ToTable("EntityTypeDocumentType");
                });

            modelBuilder.Entity("WL.Domain.File", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Issue");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("DocumentId")
                        .HasName("PK_F");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("WL.Domain.User.Credential", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<DateTime>("Creation");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.HasKey("UserId")
                        .HasName("PK_C");

                    b.HasAlternateKey("Token")
                        .HasName("AK_C_T");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("WL.Domain.User.RestoreCredential", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("Token");

                    b.HasKey("UserId")
                        .HasName("PK_RC");

                    b.ToTable("RestoreCredentials");
                });

            modelBuilder.Entity("WL.Domain.User.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConfigSystem");

                    b.Property<int>("CreateDocuments");

                    b.Property<int>("DeleteDocuments");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("PK_R");

                    b.HasAlternateKey("Name")
                        .HasName("AK_R_N");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WL.Domain.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IDDocument")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<long>("RoleId");

                    b.Property<string>("State")
                        .IsRequired();

                    b.HasKey("Id")
                        .HasName("PK_U");

                    b.HasAlternateKey("Email")
                        .HasName("AK_U_E");

                    b.HasAlternateKey("IDDocument")
                        .HasName("AK_U_IDD");

                    b.HasAlternateKey("Nickname")
                        .HasName("AK_U_N");

                    b.HasIndex("RoleId")
                        .HasName("IX_U_RI");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WL.Domain.Annotation", b =>
                {
                    b.HasOne("WL.Domain.AnnotationType", "AnnotationType")
                        .WithMany()
                        .HasForeignKey("AnnotationTypeId")
                        .HasConstraintName("FK_A_AT_ATI")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WL.Domain.Document", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .HasConstraintName("FK_A_D_FI")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.Document", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .HasConstraintName("FK_A_D_TI")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WL.Domain.Document", b =>
                {
                    b.HasOne("WL.Domain.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_D_DT_DTI")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_D_E_EI")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.File", "File")
                        .WithOne("Document")
                        .HasForeignKey("WL.Domain.Document", "FileDocumentId")
                        .HasConstraintName("FK_D_F_FDI")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.Entity", b =>
                {
                    b.HasOne("WL.Domain.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .HasConstraintName("FK_E_ET_ETI")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.EntityTypeDocumentType", b =>
                {
                    b.HasOne("WL.Domain.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_ETDT_DT_DTI")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.EntityType", "EntityType")
                        .WithMany("SupportedDocuments")
                        .HasForeignKey("EntityTypeId")
                        .HasConstraintName("FK_ETDT_ET_ETI")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.User.Credential", b =>
                {
                    b.HasOne("WL.Domain.User.User", "User")
                        .WithOne("Credential")
                        .HasForeignKey("WL.Domain.User.Credential", "UserId")
                        .HasConstraintName("FK_C_U_UI")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.User.RestoreCredential", b =>
                {
                    b.HasOne("WL.Domain.User.User", "User")
                        .WithOne()
                        .HasForeignKey("WL.Domain.User.RestoreCredential", "UserId")
                        .HasConstraintName("FK_RC_U_UI")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.User.User", b =>
                {
                    b.HasOne("WL.Domain.User.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_U_R_RI")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
