// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using WL.Persistance;

namespace WL.Persistance.Migrations
{
    [DbContext(typeof(WLDbContext))]
    [Migration("20190425210639_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("WL.Domain.Annotation", b =>
                {
                    b.Property<long>("AnnotationId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AnnotationTypeId");

                    b.Property<string>("Description");

                    b.Property<long>("FromDocumentId");

                    b.Property<long>("ToDocumentId");

                    b.HasKey("AnnotationId");

                    b.HasAlternateKey("FromDocumentId", "ToDocumentId");

                    b.HasIndex("AnnotationTypeId");

                    b.HasIndex("ToDocumentId");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("WL.Domain.AnnotationType", b =>
                {
                    b.Property<long>("AnnotationTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Root")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("AnnotationTypeId");

                    b.HasAlternateKey("Name");

                    b.HasAlternateKey("Root");

                    b.ToTable("AnnotationTypes");
                });

            modelBuilder.Entity("WL.Domain.Document", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DocumentTypeId");

                    b.Property<long>("EntityId");

                    b.Property<long>("FileDocumentId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("PublicationDate");

                    b.Property<long>("PublicationYear");

                    b.HasKey("DocumentId");

                    b.HasAlternateKey("DocumentTypeId", "EntityId", "Number", "PublicationYear");

                    b.HasIndex("EntityId");

                    b.HasIndex("FileDocumentId")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WL.Domain.DocumentType", b =>
                {
                    b.Property<long>("DocumentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("DocumentTypeId");

                    b.HasAlternateKey("Name");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("WL.Domain.Entity", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("EntityTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("EntityId");

                    b.HasAlternateKey("Name");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("WL.Domain.EntityType", b =>
                {
                    b.Property<long>("EntityTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("EntityTypeId");

                    b.HasAlternateKey("Name");

                    b.ToTable("EntityTypes");
                });

            modelBuilder.Entity("WL.Domain.EntityTypeDocumentType", b =>
                {
                    b.Property<long>("EntityTypeId");

                    b.Property<long>("DocumentTypeId");

                    b.HasKey("EntityTypeId", "DocumentTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("EntityTypeDocumentType");
                });

            modelBuilder.Entity("WL.Domain.File", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Issue");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("DocumentId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("WL.Domain.User.Credential", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<DateTime>("Creation");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasAlternateKey("Token");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("WL.Domain.User.Restore", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("Token");

                    b.HasKey("UserId");

                    b.ToTable("Restores");
                });

            modelBuilder.Entity("WL.Domain.User.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConfigSystem");

                    b.Property<int>("CreateDocuments");

                    b.Property<int>("DeleteDocuments");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("RoleId");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WL.Domain.User.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IDDocument")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("RoleId");

                    b.Property<long?>("RoleId1");

                    b.Property<string>("State")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("IDDocument");

                    b.HasAlternateKey("Nickname");

                    b.HasIndex("RoleId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WL.Domain.Annotation", b =>
                {
                    b.HasOne("WL.Domain.AnnotationType", "AnnotationType")
                        .WithMany()
                        .HasForeignKey("AnnotationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WL.Domain.Document", "From")
                        .WithMany()
                        .HasForeignKey("FromDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.Document", "To")
                        .WithMany()
                        .HasForeignKey("ToDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WL.Domain.Document", b =>
                {
                    b.HasOne("WL.Domain.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.File", "File")
                        .WithOne("Document")
                        .HasForeignKey("WL.Domain.Document", "FileDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.Entity", b =>
                {
                    b.HasOne("WL.Domain.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.EntityTypeDocumentType", b =>
                {
                    b.HasOne("WL.Domain.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_ETDT_DT")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WL.Domain.EntityType", "EntityType")
                        .WithMany("SupportedDocuments")
                        .HasForeignKey("EntityTypeId")
                        .HasConstraintName("FK_ETDT_ET")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.User.Credential", b =>
                {
                    b.HasOne("WL.Domain.User.User", "User")
                        .WithOne("Credential")
                        .HasForeignKey("WL.Domain.User.Credential", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.User.Restore", b =>
                {
                    b.HasOne("WL.Domain.User.User", "User")
                        .WithOne()
                        .HasForeignKey("WL.Domain.User.Restore", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WL.Domain.User.User", b =>
                {
                    b.HasOne("WL.Domain.User.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");
                });
#pragma warning restore 612, 618
        }
    }
}
